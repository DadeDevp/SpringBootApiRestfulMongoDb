hashCode Equals: Serve para comparar objetos. Por padrão os objetos serao comparados pelo ID

Serializable: Padrao do java para que os objetos sejam convertidos em bytes para ser trafegado pela internet ou gravado em arquivo

ResponseEntity<T> : É um objeto do spring que encaspusla uma estrutura necessária para retornar respostas http

Nas interfaces repositories que herdam do MongoRepository, o MongoRepository precisa de dois parametros, o tipo de dados do Repositorio e o tipo de dados do ID
	@Repository
	public interface UserRepository extends MongoRepository<User, String>{

	}


Para indicar que uma classe corresponde a uma colecao do MongoDB, usar a notacao @Document ou @Document(collection="user")
Se for só @Document o spring vai pegar o nome da classe e por em minusculo para associar com a colecao, exemplo: user

	@Document
	public class User implements Serializable {}
	

Para associar o id passado via http get a id recebido no metód findById tenho que usar a annotation @PathVariable
@GetMapping(value="/{id}")
	public ResponseEntity<UserDTO> findbyId (@PathVariable String id){


O @ControllerAdvice indica para o spring que essa classe será responsável para tratar os possíveis erros das requisicoes
		@ControllerAdvice
		public class ResourceExceptionHandler {}

============= Configuracao de um entidade e divsao de pacotes ===========

Estrutura e Divisão de Pacotes
Pacote domain (ou model):

User: Classe de domínio que representa a entidade User. Deve incluir:
	Atributos que representam as propriedades da entidade.
	Métodos getters e setters para acessar e modificar os atributos.
	Métodos hashCode e equals para comparações de identidade.
	Construtores para criar instâncias da entidade.
	
Pacote repository:
	UserRepository: Interface que define o repositório para a entidade User. 
	Estende uma interface de repositório do framework de persistência utilizado (como JPA JpaRepository, Hibernate Repository, etc.), fornecendo métodos de persistência e consulta específicos para a entidade User.

Pacote service:
	UserService: Classe de serviço que contém a lógica de negócio para operações relacionadas à entidade User. 
	Utiliza o UserRepository (injetado como dependência) para realizar operações de CRUD (Create, Read, Update, Delete) e outras lógicas de negócio específicas.
	Pacote controller (ou resource):

UserResource (ou UserController): Classe que define os endpoints da API para operações relacionadas à entidade User. 
Responsável por tratar requisições HTTP (GET, POST, PUT, DELETE), delegando a execução das operações para o UserService e retornando a resposta adequada ao cliente.

UserDTO: 
	Classe que serve como um Data Transfer Object para a entidade User. O UserDTO é útil para enviar e receber dados específicos do cliente ou da API, 
	evitando a exposição direta da entidade de domínio. Pode incluir:
	Atributos específicos que devem ser enviados para ou recebidos do cliente.
	Métodos getters e setters.
	Não inclui lógica de negócio, apenas dados.


Resumo da Responsabilidade dos Componentes
	Entidade (User): Representa o modelo de dados.
	Repositório (UserRepository): Abstrai o acesso ao banco de dados.
	Serviço (UserService): Contém lógica de negócio e interage com o repositório.
	Controlador (UserResource ou UserController): Expõe a API e mapeia as operações para a lógica de negócio.
=========================================================================================================================================

============= Lógica de tratamentos de erros ===========

1. Serviço UserService
Método findAll: Retorna todos os usuários. Se tudo ocorrer normalmente, este método simplesmente recupera e retorna a lista de usuários do repositório.
Método findById: Busca um usuário por ID. Se o usuário não for encontrado, o método orElseThrow do Optional<User> lança uma exceção personalizada ObjectNotFoundException.


2. Exceção Personalizada ObjectNotFoundException
Esta é uma classe de exceção personalizada que estende RuntimeException. Ela é usada para sinalizar uma situação específica onde um objeto (neste contexto, um usuário) não é encontrado.
Quando instanciada, ela aceita uma mensagem (por exemplo, "Objeto não encontrado") que pode ser usada para fornecer mais detalhes sobre a exceção.


3. Classe StandardError
Define a estrutura de uma resposta de erro padronizada que será enviada ao cliente. Inclui detalhes como timestamp, status HTTP, mensagem de erro, e o caminho da requisição que gerou o erro.
Esta estrutura é útil para fornecer aos clientes da API informações consistentes e úteis sobre erros.


4. Manipulador de Exceções ResourceExceptionHandler
Anotado com @ControllerAdvice, esta classe permite que você lide globalmente com exceções em toda a aplicação, proporcionando um ponto central para tratamento de erros.
O método objectNotFound é anotado com @ExceptionHandler(ObjectNotFoundException.class), indicando que ele deve ser invocado quando uma ObjectNotFoundException for lançada em qualquer parte da aplicação.
Dentro deste método, um objeto StandardError é criado e preenchido com detalhes sobre o erro, incluindo a mensagem da exceção, o status HTTP (404 Not Found, neste caso), e o URI da requisição que falhou.
Finalmente, este método retorna uma ResponseEntity contendo o objeto StandardError, que é então enviado como resposta ao cliente.
Fluxo do Tratamento de Erros
Uma requisição é feita para buscar um usuário por ID.
Se o usuário não for encontrado, findById em UserService lança uma ObjectNotFoundException.
A exceção é capturada pelo manipulador de exceções global ResourceExceptionHandler.
ResourceExceptionHandler cria um StandardError com detalhes sobre o erro e o retorna ao cliente em uma resposta HTTP com status 404.

Este fluxo garante que, quando erros específicos ocorrem, a aplicação responde de maneira padronizada e informativa, 
melhorando a experiência do usuário e facilitando a depuração por parte dos desenvolvedores.